<?php
$rootplugin = dirname(dirname(__FILE__));
require_once($rootplugin.'/libraries/veritrans-php/Veritrans.php'); 

/**
 * Implements hook_commerce_payment_method_info().
 */

function commerce_midtrans_online_installment_commerce_payment_method_info() {
  $payment_methods = array();

  // if empty, set default
  if(!isset($payment['settings']['payment_label'])){
    $payment['settings']['payment_label'] = 'Online Installment Payment via Midtrans';
  }
  else if($payment['settings']['payment_label'] == '' OR !$payment['settings']['payment_label']){
    $payment['settings']['payment_label'] = 'Online Installment Payment via Midtrans'; 
  }

  $payment_methods['commerce_midtrans_online_installment'] = array(
    'base' => 'commerce_midtrans_online_installment',
    'title' => t('Midtrans Online Installment'),
    'short_title' => t('MT-OnlineInstallment'),
    'display_title' => t($payment['settings']['payment_label']),
    'description' => t('Midtrans Online Installment Payment Gateway'),
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_midtrans_online_installment_settings_form( $settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'conversion' => '1',
    'payment_label' => 'Online Installment Payment via Midtrans',
    'merchant_id' => '',
    'sandbox_server_key' => '',
    'sandbox_client_key' => '',    
    'production_server_key' => '',
    'production_client_key' => '',    
    'is_sanitized' => '',
    'is3ds' => '1',
    'save_card' => '',
    'enable_redirect' => '',
    'payment_mode' => '',
    'min_amount' => '500000',
    'custom_field' => '',
  );

  $form['payment_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Frontend Payment Text Label'),
    '#description' => t('Frontend payment text label that will be displayed to your customer, default is "Online Installment Payment via Midtrans"'),
    '#default_value' => $settings['payment_label'],
  );

  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('Use sandbox if you use midtrans sandbox MAP account for testing, and use production if you use production MAP account, don\'t forget to change serverkey according to sandbox or production account.'),
    '#options' => array(
      'LIVE' => t('Production mode'),
      'TEST' => t('Sandbox mode'),
    ),
    '#default_value' => $settings['payment_mode'],
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Input your Midtrans Merchant ID (e.g M012345). Get the ID <a href="https://dashboard.sandbox.midtrans.com/settings/config_info" target="_blank">here</a>'),
    '#default_value' => $settings['merchant_id'],
    '#size' => 10,
    '#required' => TRUE,
  );

  $form['production_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Key Production'),
    '#description' => t('Input your <b>Production</b> Midtrans <b>Server Key</b>. Get the key <a href="https://dashboard.midtrans.com/settings/config_info" target="_blank">here</a>'),
    '#default_value' => $settings['production_server_key'],
    '#size' => 50,
  );

  $form['production_client_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Key Production'),
    '#description' => t('Input your <b>Production</b> Midtrans <b>Client Key</b>. Get the key <a href="https://dashboard.midtrans.com/settings/config_info" target="_blank">here</a>'),
    '#default_value' => $settings['production_client_key'],
    '#size' => 50,
  );

  $form['sandbox_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Key Sandbox'),
    '#description' => t('Input your <b>Sandbox</b> Midtrans <b>Server Key</b>. Get the key <a href="https://dashboard.sandbox.midtrans.com/settings/config_info" target="_blank">here</a>'),
    '#default_value' => $settings['sandbox_server_key'],
    '#size' => 50,
  );

  $form['sandbox_client_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Key Sandbox'),
    '#description' => t('Input your <b>Sandbox</b> Midtrans <b>Client Key</b>. Get the key <a href="https://dashboard.sandbox.midtrans.com/settings/config_info" target="_blank">here</a>'),
    '#default_value' => $settings['sandbox_client_key'],
    '#size' => 50,
  );

  $form['is_sanitized'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Sanitized'),
    '#default_value' => $settings['is_sanitized'],
    '#description' => t('Payment is sanitized'),
  );

  $form['is3ds'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable 3D-Secure'),
    '#default_value' => $settings['is3ds'],
    '#description' => t('You must enable 3D Secure. Please contact us if you wish to disable this feature in the Production environment'),
  );

  $form['save_card'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Save Card'),
    '#default_value' => $settings['save_card'],
    '#description' => t('This will allow your customer to save their card on the payment popup, for faster payment flow on the following purchase'),
  );

  $form['enable_redirect'] = array(
    '#type' => 'checkbox',
    '#title' => t('Redirect Payment Page'),
    '#default_value' => $settings['enable_redirect'],
    '#description' => t('This will redirect customer to Midtrans hosted payment page instead of popup payment page on your website. <br>Leave it disabled if you are not sure'),
  );

  $form['conversion'] = array(
    '#type' => 'textfield',
    '#title' => t('Currency Conversion Rate to IDR'),
    '#description' => t('Input currency conversion rate if you are not using IDR as default currency (example: <strong>"10000"</strong>). If you already use IDR as currency, please input <strong>"1"</strong>'),
    '#default_value' => $settings['conversion'],
    '#size' => 50,   
    '#required' => TRUE,
  );

  $form['min_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimal Transaction Amount'),
    '#description' => t('Minimal transaction amount allowed to be paid with installment (amount in IDR, without comma or period) example: 500000 </br> if the transaction amount is below this value, customer will be redirected to Credit Card fullpayment page.'),
    '#default_value' => $settings['min_amount'],
  );

  $form['custom_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Fields'),
    '#description' => t('This will allow you to set custom fields that will be displayed on Midtrans dashboard<br>Up to 2 fields are available, separate by coma (,)<br>Example: Order from web, Processed'),
    '#default_value' => $settings['custom_field'],
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_midtrans_online_installment_redirect_form($form, &$form_state, $order, $payment_method) {
 
  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
      'absolute' => TRUE,
    )),
    // Specify the current payment method instance ID in the notify_url.
    'pay_method' => $payment_method['instance_id'],
  );
$form1 = array();
  
  $button['#action'] = commerce_midtrans_online_installment_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);

  $button['actions'] = array('#type' => 'actions');
  $button['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Proceed To Payment',  
  );
  
  return $button;
  return commerce_midtrans_online_installment_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * 
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 */
function commerce_midtrans_online_installment_order_form($form, &$form_state, $order, $settings = array()) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Get the order total in the default currency. then multiply it by conversion rate
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code) * $settings['conversion'];

  // Build a description for the order.
  $items_details = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $item = array();
    $line_item_price = $line_item_wrapper->commerce_unit_price->amount->value();
    $item['id'] = $line_item_wrapper->line_item_id->value();
    $item['quantity'] = round($line_item_wrapper->quantity->value(), 2);
    $item['price'] = commerce_currency_amount_to_decimal($line_item_price, $currency_code) * $settings['conversion'];
    $item['name'] = $line_item_wrapper->line_item_label->value();
    $items_details[] = $item;
  }

  // libraries_load('midtrans');
  if ($settings['payment_mode'] == 'TEST'){
    // set sandbox credentials here
    Veritrans_Config::$serverKey = $settings['sandbox_server_key'];
    Veritrans_Config::$isProduction = FALSE;
    $client_key = $settings['sandbox_client_key'];
    $snap_script_url = "https://app.sandbox.midtrans.com/snap/snap.js";
    $mixpanel_key = "9dcba9b440c831d517e8ff1beff40bd9";
  }
  if ($settings['payment_mode'] == 'LIVE'){
    // set production credentials here
    Veritrans_Config::$serverKey = $settings['production_server_key'];
    Veritrans_Config::$isProduction = TRUE;
    $client_key = $settings['production_client_key'];
    $snap_script_url = "https://app.midtrans.com/snap/snap.js";
    $mixpanel_key = "17253088ed3a39b1e2bd2cbcfeca939a";
  }

  // Uncomment to enable sanitization.
  Veritrans_Config::$isSanitized = $settings['is_sanitized'] ? TRUE : FALSE;
  // Uncomment to enable 3D-Secure.
  Veritrans_Config::$is3ds = $settings['is3ds'] ? TRUE : FALSE;
  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

   $params = array(
    'transaction_details' => array(
      'order_id' => $order->order_id,
      'gross_amount' => $amount,
    ),
    'enabled_payments' => ['credit_card'],
     'callbacks' => array(
        'finish' => $settings['return'],
        'error' => $settings['cancel_return'],
       ),
    'item_details' => $items_details,
    'customer_details' => array(
      'first_name' => $billing_address['first_name'],
      'last_name' => $billing_address['last_name'],
      'email' => drupal_substr($order->mail, 0, 100),
      'phone' => $order_wrapper->commerce_customer_billing->commerce_midtrans_billing_phone->value(),
      'billing_address' => array(
        'first_name' => $billing_address['first_name'],
        'last_name' => $billing_address['last_name'],
        'address' => $billing_address['thoroughfare'],
        'city' => $billing_address['locality'],
        'postal_code' => $billing_address['postal_code'],
        'country_code' => commerce_midtrans_convert_country_code($billing_address['country']),
        'phone' => $order_wrapper->commerce_customer_billing->commerce_midtrans_billing_phone->value(),
      ),
    ),
    'custom_field1' => 'online_installment',
  );

  //add installment params
  if($amount >= $settings['min_amount']){
        $terms = array(3,6,9,12,15,18,21,24,27,30,33,36);
        $params['credit_card']['installment']['required'] = true;
        $params['credit_card']['installment']['terms'] = array(
            'bri' => $terms, 
            'maybank' => $terms,
            'bri' => $terms,
            'bni' => $terms, 
            'mandiri' => $terms, 
            'cimb' => $terms,
            'bca' => $terms
        );      
  };
  if ($settings['save_card'] && user_is_logged_in()){
    $params['user_id'] = crypt( commerce_midtrans_convert_country_code($billing_address['country']).$order_wrapper->commerce_customer_billing->commerce_midtrans_billing_phone->value() , Veritrans_Config::$serverKey );
    $params['credit_card']['save_card'] = true;          
  }

  $custom_fields_params = explode(",",$settings['custom_field']);
  if ( !empty($custom_fields_params[0]) ){
          $params['custom_field2'] = $custom_fields_params[0];
          $params['custom_field3'] = !empty($custom_fields_params[1]) ? $custom_fields_params[1] : null;
        }

  watchdog('commerce_midtrans', 'Data to send midtrans: !Response :', array('!Response' => '<pre>' . print_r($params, TRUE) . '</pre>'), WATCHDOG_DEBUG);
    
    if(!$settings['enable_redirect']){
  try {
    // Redirect to Midtrans VTWeb SNAP page.
    $snapToken = Veritrans_Snap::getSnapToken($params); 
?>
    <!-- start Mixpanel -->
    <script type="text/javascript">(function(c,a){if(!a.__SV){var b=window;try{var d,m,j,k=b.location,f=k.hash;d=function(a,b){return(m=a.match(RegExp(b+"=([^&]*)")))?m[1]:null};f&&d(f,"state")&&(j=JSON.parse(decodeURIComponent(d(f,"state"))),"mpeditor"===j.action&&(b.sessionStorage.setItem("_mpcehash",f),history.replaceState(j.desiredHash||"",c.title,k.pathname+k.search)))}catch(n){}var l,h;window.mixpanel=a;a._i=[];a.init=function(b,d,g){function c(b,i){var a=i.split(".");2==a.length&&(b=b[a[0]],i=a[1]);b[i]=function(){b.push([i].concat(Array.prototype.slice.call(arguments,0)))}}var e=a;"undefined"!==typeof g?e=a[g]=[]:g="mixpanel";e.people=e.people||[];e.toString=function(b){var a="mixpanel";"mixpanel"!==g&&(a+="."+g);b||(a+=" (stub)");return a};e.people.toString=function(){return e.toString(1)+".people (stub)"};l="disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(" ");for(h=0;h<l.length;h++)c(e,l[h]);var f="set set_once union unset remove delete".split(" ");e.get_group=function(){function a(c){b[c]=function(){call2_args=arguments;call2=[c].concat(Array.prototype.slice.call(call2_args,0));e.push([d,call2])}}for(var b={},d=["get_group"].concat(Array.prototype.slice.call(arguments,0)),c=0;c<f.length;c++)a(f[c]);return b};a._i.push([b,d,g])};a.__SV=1.2;b=c.createElement("script");b.type="text/javascript";b.async=!0;b.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===c.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";d=c.getElementsByTagName("script")[0];d.parentNode.insertBefore(b,d)}})(document,window.mixpanel||[]);mixpanel.init("<?php echo $mixpanel_key ?>");</script> 
    <!-- end Mixpanel -->     
    <script src="<?php echo $snap_script_url; ?>" data-client-key="<?php echo $client_key; ?>"></script>
    <script type="text/javascript">
      function MixpanelTrackResult(snap_token, merchant_id, cms_name, cms_version, plugin_name, plugin_version, status, result) {
        var eventNames = {
          pay: 'pg-pay',
          success: 'pg-success',
          pending: 'pg-pending',
          error: 'pg-error',
          close: 'pg-close'
        };
        mixpanel.track(eventNames[status], {
          merchant_id: merchant_id,
          cms_name: cms_name,
          cms_version: cms_version,
          plugin_name: plugin_name,
          plugin_version: plugin_version,
          snap_token: snap_token,
          payment_type: result ? result.payment_type: null,
          order_id: result ? result.order_id: null,
          status_code: result ? result.status_code: null,
          gross_amount: result && result.gross_amount ? Number(result.gross_amount) : null,
        });
      }
        var MID_SNAP_TOKEN = "<?=$snapToken?>";
        var MID_MERCHANT_ID = "<?=$settings["merchant_id"];?>";
        var MID_CMS_NAME = "drupal 7";
        var MID_CMS_VERSION = "<?=VERSION?>";
        var MID_PLUGIN_NAME = "online installment";
        var MID_PLUGIN_VERSION = "2.0.5";

    var retryCount = 0;
    var snapExecuted = false;
    var intervalFunction = 0;
     // Continously retry to execute SNAP popup if fail, with 1000ms delay between retry
      intervalFunction = setInterval(function() {
        try{
          snap.pay(MID_SNAP_TOKEN,{
            onSuccess: function(result){
              MixpanelTrackResult(MID_SNAP_TOKEN, MID_MERCHANT_ID, MID_CMS_NAME, MID_CMS_VERSION, MID_PLUGIN_NAME,MID_PLUGIN_VERSION, 'success', result);
              window.location = '<?php echo $settings['return'] ?>';
            },
            onPending: function(result){
              MixpanelTrackResult(MID_SNAP_TOKEN, MID_MERCHANT_ID, MID_CMS_NAME, MID_CMS_VERSION, MID_PLUGIN_NAME, MID_PLUGIN_VERSION, 'pending', result);
              window.location = '<?php echo $settings['return'] ?>';
            },
            onError: function(result){
              MixpanelTrackResult(MID_SNAP_TOKEN, MID_MERCHANT_ID, MID_CMS_NAME, MID_CMS_VERSION, MID_PLUGIN_NAME, MID_PLUGIN_VERSION, 'error', result);
              window.location = '<?php echo $settings['cancel_return'] ?>';              
            },
            onClose: function(){
              MixpanelTrackResult(MID_SNAP_TOKEN, MID_MERCHANT_ID, MID_CMS_NAME, MID_CMS_VERSION, MID_PLUGIN_NAME, MID_PLUGIN_VERSION, 'close', null);
            }
          });          
          snapExecuted = true; // if SNAP popup executed, change flag to stop the retry.
        } catch (e){ 
          retryCount++;
          if(retryCount >= 10){
            location.reload(); 
            //payButton.innerHTML = "Loading..."; 
            return;
          }
          console.log(e);
          console.log("Snap not ready yet... Retrying in 1000ms!");
        } 
        finally {
          if (snapExecuted) {
            clearInterval(intervalFunction);
            MixpanelTrackResult(MID_SNAP_TOKEN, MID_MERCHANT_ID, MID_CMS_NAME, MID_CMS_VERSION, MID_PLUGIN_NAME, MID_PLUGIN_VERSION, 'pay', null);
          }
        }
      }, 1000);
    </script>
<?php
}
   catch (Exception $e) {
     drupal_set_message($e->getMessage(), 'error');
     error_log($e->getMessage());
   }
 }
 else{
  try{
    $redirect_url = Veritrans_Snap::createTransaction($params)->redirect_url;
    drupal_goto($redirect_url);
  }
   catch (Exception $e) {
     drupal_set_message($e->getMessage(), 'error');
     error_log($e->getMessage());
   }
 }
}
// /**
//  * Implements hook_commerce_checkout_pane_info_alter().
//  */
// function commerce_veritrans_web_commerce_checkout_pane_info_alter(&$checkout_panes) {
//   $order_id = arg(1);
//     error_log('order id, '.$order_id); //debugan  
//   $order = commerce_order_load($order_id);
  
//     $checkout_panes['checkout_completion_message']['callbacks']['checkout_form'] = 'commerce_veritrans_web_completion_message_pane_checkout_form';
  
// }


// /**
//  * Checkout pane callback: Wraps the completion message with a custom div.
//  */
// function commerce_veritrans_web_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
//   // Build the original message pane.
//   $pane_form = commerce_checkout_completion_message_pane_checkout_form($form, $form_state, $checkout_pane, $order);
//     error_log('order id, '.$order_id); //debugan  

//     // Add and extra div.
//     $pane_form['commerce_veritrans_web_header'] = array(
//       '#markup' => '<div class="commerce-veritrans-header">' . 'lopop' . '</div>',
//       '#weight' => -10,
//     );
  
//   return $pane_form;
// }
